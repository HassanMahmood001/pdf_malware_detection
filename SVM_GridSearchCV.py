from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
import pandas as pd
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV
import sklearn.model_selection as model_selection
from sklearn.svm import SVC
import joblib

dataset = pd.read_csv('Final_Dataset.csv')

X = dataset.drop('Malicious',axis=1).values
y = dataset['Malicious'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, shuffle= True,random_state=10)

X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25,shuffle= True,random_state=10)  # 0.25 x 0.8 = 0.20


print("\n=================================================")
print('\n --> Training Support vector machine (SVM) <-- \n')

steps = [('scaler', StandardScaler()),('SVM', SVC())]
pipeline = Pipeline(steps)

svm_grid = [{'SVM__C': [0.1, 1, 10, 100], 'SVM__kernel': ['linear','poly']}]
svm_grid2 = [{'SVM__gamma': [0.001, 0.01, 0.1, 1, 10, 100],'SVM__C': [0.1, 1, 10, 100], 'SVM__kernel': ['rbf']}]

clf = GridSearchCV(pipeline, param_grid=svm_grid, cv = 10, scoring='accuracy',verbose=5)
clf.fit(X_train,y_train)

# print(clf.best_params_)
print("\nTraining Accuracy: ",round((clf.best_score_)*100,2))


clf2 = GridSearchCV(pipeline, param_grid=svm_grid2, cv = 10, scoring='accuracy',verbose=5)
clf2.fit(X_train,y_train)


# print(clf2.best_params_)
print("\nTraining Accuracy: ",round((clf2.best_score_)*100,2))

if clf2.best_score_>clf.best_score_:
  xx=clf2.best_params_

else:
  xx=clf.best_params_

f=open("./lib/SVM_tuned_Bestparam.txt","w")
f.write(str(xx))
f.close()

print("\n\nBest parameters: ",xx) 


print("\n=====================Cross Validation Accuracy=========================")

results = []
if clf2.best_score_>clf.best_score_:
  xx=clf2.best_params_
  model = make_pipeline(StandardScaler(), SVC(kernel= xx.get('SVM__kernel') , gamma= xx.get('SVM__gamma'),C=xx.get('SVM__C')))

  kfold = model_selection.KFold(n_splits=10, shuffle=True)
  cv_results = model_selection.cross_val_score(model, X_val, y_val, cv=kfold, scoring='accuracy')
  results.append(cv_results)
  print("\nAccuracy--> ", round((cv_results.mean())*100,3), "%\n\n")
else:
  xx=clf.best_params_
  model = make_pipeline(StandardScaler(), SVC(kernel= xx.get('SVM__kernel') , C= xx.get('SVM__C')))
  kfold = model_selection.KFold(n_splits=10, shuffle=True)
  cv_results = model_selection.cross_val_score(model, X_val, y_val, cv=kfold, scoring='accuracy')
  results.append(cv_results)
  print("Accuracy--> ", cv_results.mean() * 100, "%")


# print("\n=====================Final Model=======================")
if clf2.best_score_>clf.best_score_:
  xx=clf2.best_params_
  pipe = make_pipeline(StandardScaler(), SVC(kernel= xx.get('SVM__kernel') , gamma= xx.get('SVM__gamma'),C=xx.get('SVM__C')))
  pipe.fit(X_train, y_train)

  # save the model to disk
  filename = './lib/SVC_tuned_model.sav'
  joblib.dump(pipe, filename)

else:
  xx=clf.best_params_
  pipe = make_pipeline(StandardScaler(), SVC(kernel= xx.get('SVM__kernel') , C= xx.get('SVM__C')))
  pipe.fit(X_train, y_train)

  # save the model to disk
  filename = './lib/SVC_tuned_model.sav'
  joblib.dump(pipe, filename)


